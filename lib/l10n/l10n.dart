import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

/// Localization configuration for Aayu app
/// Supports English, Sinhala, and Tamil languages
class L10n {
  static const List<Locale> supportedLocales = [
    Locale('en', 'US'), // English
    Locale('si', 'LK'), // Sinhala (Sri Lanka)
    Locale('ta', 'LK'), // Tamil (Sri Lanka)
  ];

  static const List<LocalizationsDelegate> localizationsDelegates = [
    GlobalMaterialLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
  ];

  /// Get locale display name
  static String getDisplayName(Locale locale) {
    switch (locale.languageCode) {
      case 'en':
        return 'English';
      case 'si':
        return 'р╖Гр╖Тр╢Вр╖Др╢╜';
      case 'ta':
        return 'родрооро┐ро┤рпН';
      default:
        return locale.languageCode.toUpperCase();
    }
  }

  /// Get locale flag emoji
  static String getFlag(Locale locale) {
    switch (locale.languageCode) {
      case 'en':
        return 'ЁЯЗ║ЁЯЗ╕';
      case 'si':
      case 'ta':
        return 'ЁЯЗ▒ЁЯЗ░';
      default:
        return 'ЁЯМР';
    }
  }

  /// Check if locale is RTL
  static bool isRTL(Locale locale) {
    // Tamil and Sinhala are LTR languages
    return false;
  }

  /// Get default locale based on system
  static Locale getDefaultLocale(List<Locale> systemLocales) {
    for (final systemLocale in systemLocales) {
      for (final supportedLocale in supportedLocales) {
        if (systemLocale.languageCode == supportedLocale.languageCode) {
          return supportedLocale;
        }
      }
    }
    return supportedLocales.first; // Default to English
  }
}

/// Extension to add localization methods to BuildContext
extension LocalizationContext on BuildContext {
  /// Get current locale
  Locale get locale => Localizations.localeOf(this);

  /// Check if current locale is Sinhala
  bool get isSinhala => locale.languageCode == 'si';

  /// Check if current locale is Tamil
  bool get isTamil => locale.languageCode == 'ta';

  /// Check if current locale is English
  bool get isEnglish => locale.languageCode == 'en';

  /// Get localized app name
  String get appName {
    switch (locale.languageCode) {
      case 'si':
      case 'ta':
        return 'р╢Жр╢║р╖Ф';
      default:
        return 'Aayu';
    }
  }
}

/// Simple localization texts for immediate use
/// (Until generated localizations are set up)
class AppTexts {
  static const Map<String, Map<String, String>> _texts = {
    'en': {
      'home': 'Home',
      'growth': 'Growth',
      'vaccines': 'Vaccines',
      'learn': 'Learn',
      'profile': 'Profile',
      'add_child': 'Add Child',
      'child_name': 'Child Name',
      'birth_date': 'Birth Date',
      'male': 'Male',
      'female': 'Female',
      'save': 'Save',
      'cancel': 'Cancel',
      'loading': 'Loading...',
      'error': 'Error',
      'success': 'Success',
      'vaccination_schedule': 'Vaccination Schedule',
      'medications_supplements': 'Medications & Supplements',
      'overdue': 'Overdue',
      'upcoming': 'Upcoming',
      'today': 'Today',
      'active': 'Active',
      'history': 'History',
      'stats': 'Stats',
      'take': 'Take',
      'skip': 'Skip',
      'add_medication': 'Add Medication',
      'side_effects_noted': 'Side Effects Noted (Optional)',
    },
    'si': {
      'home': 'р╢╕р╖Фр╢╜р╖К р╢┤р╖Тр╢зр╖Фр╖А',
      'growth': 'р╖Ар╢╗р╖Кр╢░р╢▒р╢║',
      'vaccines': 'р╢Ср╢▒р╖Кр╢▒р╢нр╖К',
      'learn': 'р╢Йр╢Ьр╖Щр╢▒р╢Ьр╢▒р╖Кр╢▒',
      'profile': 'р╢┤р╖Рр╢нр╖Тр╢Ър╢й',
      'add_child': 'р╢пр╢╗р╖Фр╖Ар╖П р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒',
      'child_name': 'р╢пр╢╗р╖Фр╖Ар╖Пр╢Ьр╖Ъ р╢▒р╢╕',
      'birth_date': 'р╢Лр╢┤р╢▒р╖К р╢пр╖Тр╢▒р╢║',
      'male': 'р╢┤р╖Фр╢╗р╖Фр╖В',
      'female': 'р╖Гр╖Кр╢нр╖КтАНр╢╗р╖У',
      'save': 'р╖Гр╖Фр╢╗р╢Ър╖Тр╢▒р╖Кр╢▒',
      'cancel': 'р╢Ер╖Ар╢╜р╢Вр╢Ьр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒',
      'loading': 'р╢┤р╖Цр╢╗р╢лр╢║ р╖Ар╖Щр╢╕р╖Тр╢▒р╖К...',
      'error': 'р╢пр╖Эр╖Вр╢║',
      'success': 'р╖Гр╖Пр╢╗р╖Кр╢ор╢Ър╢║р╖Т',
      'vaccination_schedule': 'р╢Ср╢▒р╖Кр╢▒р╢нр╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖Ъ р╢Ър╖Пр╢╜р╖Гр╢зр╖Др╢▒',
      'medications_supplements': 'р╢Цр╖Вр╢░ р╖Гр╖Д р╢Ер╢нр╖Тр╢╗р╖Ър╢Ъ',
      'overdue': 'р╢┤р╖КтАНр╢╗р╢╕р╖Пр╢п р╖Ар╖Ц',
      'upcoming': 'р╢Йр╢пр╖Тр╢╗р╖Т',
      'today': 'р╢Ер╢п',
      'active': 'р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╖У',
      'history': 'р╢Йр╢нр╖Тр╖Др╖Пр╖Гр╢║',
      'stats': 'р╖Гр╢Вр╢Ыр╖КтАНр╢║р╖Пр╢╜р╖Ър╢Ыр╢▒',
      'take': 'р╢Ьр╢▒р╖Кр╢▒',
      'skip': 'р╢╕р╢Я р╖Др╢╗р╖Тр╢▒р╖Кр╢▒',
      'add_medication': 'р╢Цр╖Вр╢░р╢║ р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒',
      'side_effects_noted': 'р╢┤р╖Пр╢╗р╖Кр╖Бр╖Кр╖А р╢┤р╖КтАНр╢╗р╢нр╖Тр╢╡р╢╜ р╖Гр╢зр╖Др╢▒р╖К (р╖Ар╖Тр╢Ър╢╜р╖Кр╢┤)',
    },
    'ta': {
      'home': 'роорпБроХрокрпНрокрпБ',
      'growth': 'ро╡ро│ро░рпНроЪрпНроЪро┐',
      'vaccines': 'родроЯрпБрокрпНрокрпВроЪро┐роХро│рпН',
      'learn': 'роХро▒рпНро▒рпБроХрпНроХрпКро│рпН',
      'profile': 'роЪрпБропро╡ро┐ро╡ро░роорпН',
      'add_child': 'роХрпБро┤роирпНродрпИропрпИ роЪрпЗро░рпН',
      'child_name': 'роХрпБро┤роирпНродрпИропро┐ройрпН рокрпЖропро░рпН',
      'birth_date': 'рокро┐ро▒роирпНрод родрпЗродро┐',
      'male': 'роЖрогрпН',
      'female': 'рокрпЖрогрпН',
      'save': 'роЪрпЗрооро┐',
      'cancel': 'ро░родрпНродрпБ роЪрпЖропрпН',
      'loading': 'роПро▒рпНро▒рпБроХро┐ро▒родрпБ...',
      'error': 'рокро┐ро┤рпИ',
      'success': 'ро╡рпЖро▒рпНро▒ро┐',
      'vaccination_schedule': 'родроЯрпБрокрпНрокрпВроЪро┐ роЕроЯрпНроЯро╡рогрпИ',
      'medications_supplements': 'рооро░рпБроирпНродрпБроХро│рпН & роЪрокрпНро│ро┐роорпЖрогрпНроЯрпНро╕рпН',
      'overdue': 'родро╛роородрооро╛рой',
      'upcoming': 'ро╡ро░ро╡ро┐ро░рпБроХрпНроХрпБроорпН',
      'today': 'роЗройрпНро▒рпБ',
      'active': 'роЪрпЖропро▓ро┐ро▓рпН',
      'history': 'ро╡ро░ро▓ро╛ро▒рпБ',
      'stats': 'рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роЩрпНроХро│рпН',
      'take': 'роОроЯрпБ',
      'skip': 'родро╡ро┐ро░рпН',
      'add_medication': 'рооро░рпБроирпНродрпБ роЪрпЗро░рпН',
      'side_effects_noted': 'рокроХрпНроХро╡ро┐ро│рпИро╡рпБроХро│рпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯродрпБ (ро╡ро┐ро░рпБрокрпНрокроорпН)',
    },
  };

  /// Get localized text
  static String get(String key, String languageCode) {
    return _texts[languageCode]?[key] ?? _texts['en']?[key] ?? key;
  }

  /// Get localized text with context
  static String getText(BuildContext context, String key) {
    final locale = Localizations.localeOf(context);
    return get(key, locale.languageCode);
  }
}

/// Number and date formatting for Sri Lankan context
class SriLankanFormatters {
  /// Format numbers for Sri Lankan context
  static String formatNumber(double number, String languageCode) {
    // Use appropriate number formatting for each language
    switch (languageCode) {
      case 'si':
      case 'ta':
        // Use local number formatting if needed
        return number.toStringAsFixed(1);
      default:
        return number.toStringAsFixed(1);
    }
  }

  /// Format dates for Sri Lankan context
  static String formatDate(DateTime date, String languageCode) {
    switch (languageCode) {
      case 'si':
        return '${date.year}/${date.month.toString().padLeft(2, '0')}/${date.day.toString().padLeft(2, '0')}';
      case 'ta':
        return '${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}';
      default:
        return '${date.month.toString().padLeft(2, '0')}/${date.day.toString().padLeft(2, '0')}/${date.year}';
    }
  }

  /// Get month names in local languages
  static List<String> getMonthNames(String languageCode) {
    switch (languageCode) {
      case 'si':
        return [
          'р╢вр╢▒р╖Ар╖Пр╢╗р╖Т', 'р╢┤р╖Щр╢╢р╢╗р╖Ар╖Пр╢╗р╖Т', 'р╢╕р╖Пр╢╗р╖Кр╢нр╖Ф', 'р╢Ер╢┤р╖КтАНр╢╗р╖Ър╢╜р╖К', 'р╢╕р╖Рр╢║р╖Т', 'р╢вр╖Цр╢▒р╖Т',
          'р╢вр╖Цр╢╜р╖Т', 'р╢Ер╢Ьр╖Эр╖Гр╖Кр╢нр╖Ф', 'р╖Гр╖Рр╢┤р╖Кр╢нр╖Рр╢╕р╖Кр╢╢р╢╗р╖К', 'р╢Фр╢Ър╖Кр╢нр╖Эр╢╢р╢╗р╖К', 'р╢▒р╖Ьр╖Ар╖Рр╢╕р╖Кр╢╢р╢╗р╖К', 'р╢пр╖Щр╖Гр╖Рр╢╕р╖Кр╢╢р╢╗р╖К'
        ];
      case 'ta':
        return [
          'роЬройро╡ро░ро┐', 'рокро┐рокрпНро░ро╡ро░ро┐', 'рооро╛ро░рпНроЪрпН', 'роПрокрпНро░ро▓рпН', 'роорпЗ', 'роЬрпВройрпН',
          'роЬрпВро▓рпИ', 'роЖроХро╕рпНроЯрпН', 'роЪрпЖрокрпНроЯроорпНрокро░рпН', 'роЕроХрпНроЯрпЛрокро░рпН', 'роиро╡роорпНрокро░рпН', 'роЯро┐роЪроорпНрокро░рпН'
        ];
      default:
        return [
          'January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December'
        ];
    }
  }
}