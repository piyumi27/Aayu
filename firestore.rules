rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and verification
    function isAuth() { 
      return request.auth != null; 
    }
    
    function isOwner(uid) { 
      return isAuth() && request.auth.uid == uid; 
    }
    
    // Enhanced verification check - user must have verified email OR phone
    function isVerified() {
      return (request.auth.token.email_verified == true) ||
             (request.auth.token.phone_number != null);
    }
    
    // Check if user document has verification flags
    function isUserVerified(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data.isEmailVerified == true || 
             userDoc.data.isPhoneVerified == true;
    }
    
    // User documents - owner can read, only verified can write
    match /users/{uid} {
      allow read: if isOwner(uid);
      allow write: if isOwner(uid) && isVerified();
      
      // User profile subcollections
      match /children/{childId} {
        allow read: if isOwner(uid);
        allow write: if isOwner(uid) && isVerified();
      }
      
      match /measurements/{measurementId} {
        allow read: if isOwner(uid);
        allow write: if isOwner(uid) && isVerified();
      }
      
      match /vaccinations/{vaccinationId} {
        allow read: if isOwner(uid);
        allow write: if isOwner(uid) && isVerified();
      }
      
      match /notifications/{notificationId} {
        allow read: if isOwner(uid);
        allow write: if isOwner(uid) && isVerified();
      }
      
      // Growth records for children
      match /children/{childId}/growthRecords/{recordId} {
        allow read: if isOwner(uid);
        allow write: if isOwner(uid) && isVerified();
      }
      
      // Vaccination records for children
      match /children/{childId}/vaccineRecords/{recordId} {
        allow read: if isOwner(uid);
        allow write: if isOwner(uid) && isVerified();
      }
    }
    
    // Public read-only data (vaccine schedules, nutrition guides, etc.)
    match /public/{document=**} {
      allow read: if true;
      allow write: if false; // Only admins can write public data
    }
    
    // App configuration and settings
    match /config/{document} {
      allow read: if isAuth();
      allow write: if false; // Only admins can update config
    }
    
    // Nutrition content and educational materials
    match /nutrition/{document=**} {
      allow read: if isAuth();
      allow write: if false; // Only content managers can update
    }
    
    // WHO growth standards and percentile data
    match /growthStandards/{document=**} {
      allow read: if isAuth();
      allow write: if false; // Only data administrators can update
    }
    
    // Sri Lankan vaccination schedule
    match /vaccineSchedules/{document=**} {
      allow read: if isAuth();
      allow write: if false; // Only health administrators can update
    }
    
    // Analytics and usage data (write-only for clients, read for admins)
    match /analytics/{userId}/{document=**} {
      allow read: if false; // Only admins can read analytics
      allow write: if isOwner(userId) && isVerified();
    }
    
    // Feedback and support tickets
    match /feedback/{ticketId} {
      allow read: if resource.data.userId == request.auth.uid;
      allow create: if isAuth() && 
                    request.auth.uid == request.resource.data.userId;
      allow update: if false; // Only support team can update tickets
    }
    
    // App version and update information
    match /appVersions/{version} {
      allow read: if true; // Public read access for version checks
      allow write: if false; // Only release managers can update
    }
    
    // Push notification tokens
    match /fcmTokens/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Shared family data (for future multi-caregiver support)
    match /families/{familyId} {
      allow read, write: if isAuth() && 
                         resource.data.members[request.auth.uid] != null &&
                         isVerified();
      
      match /children/{childId} {
        allow read, write: if isAuth() && 
                           get(/databases/$(database)/documents/families/$(familyId)).data.members[request.auth.uid] != null &&
                           isVerified();
      }
    }
    
    // Emergency contacts and medical information
    match /emergencyContacts/{userId} {
      allow read, write: if isOwner(userId) && isVerified();
    }
    
    // Backup and restore data
    match /backups/{userId}/{document=**} {
      allow read, write: if isOwner(userId) && isVerified();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
Key Security Features:

1. **Verification Gate**: All write operations require either email_verified=true 
   OR phone_number claim to be present in the Firebase Auth token.

2. **Owner-Only Access**: Users can only access their own data using the 
   isOwner(uid) function that checks request.auth.uid.

3. **Read/Write Separation**: Most public content is read-only for users,
   write access is restricted to administrators.

4. **Nested Collections**: Proper security for subcollections under user
   documents (children, measurements, vaccinations).

5. **Future-Proof**: Rules for family sharing, analytics, feedback, and 
   other planned features.

6. **Defensive**: Default deny-all rule at the end ensures no unintended access.

Usage Notes:
- Deploy with: firebase deploy --only firestore:rules
- Test with: firebase emulators:start --only firestore
- Monitor with: Firebase Console > Firestore > Rules tab

The rules ensure that unverified users can read their own data but cannot
write/sync to Firestore until they complete email or phone verification.
*/