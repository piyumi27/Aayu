name: Ayu CI/CD Pipeline

on:
  push:
    branches: [ "master", "cleanup/git-repository-cleanup" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '20'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      flutter: ${{ steps.changes.outputs.flutter }}
      android: ${{ steps.changes.outputs.android }}
      ios: ${{ steps.changes.outputs.ios }}
      any_code: ${{ steps.changes.outputs.any_code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            flutter:
              - 'lib/**'
              - 'test/**'
              - 'pubspec.yaml'
              - 'pubspec.lock'
              - '.github/workflows/**'
            android:
              - 'android/**'
              - 'lib/**'
              - 'pubspec.yaml'
              - 'pubspec.lock'
            ios:
              - 'ios/**'
              - 'lib/**'
              - 'pubspec.yaml'
              - 'pubspec.lock'
            any_code:
              - 'lib/**'
              - 'test/**'
              - 'android/**'
              - 'ios/**'
              - 'pubspec.yaml'
              - 'pubspec.lock'
              - '.github/workflows/**'

  quality:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: changes
    if: always() && (needs.changes.outputs.flutter == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: 'flutter-${{ env.FLUTTER_VERSION }}'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: deps-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            deps-${{ runner.os }}-

      - name: Install dependencies
        run: |
          flutter pub get
          flutter pub deps --style=compact

      - name: Static analysis
        run: flutter analyze --fatal-infos

      - name: Run tests with coverage
        run: |
          flutter test --coverage --test-randomize-ordering-seed=random
          
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

      - name: Security scan
        run: |
          # Check for secrets in code
          if grep -r --include="*.dart" --include="*.yaml" -E "(api_key|password|secret|token)" . --exclude-dir=.git --quiet; then
            echo "ERROR: Potential secrets found in code"
            exit 1
          fi
          
          # Check for debug code in production
          if grep -r --include="*.dart" -E "print\(|debugPrint\(" lib/ | grep -v "kDebugMode" | head -1; then
            echo "WARNING: Debug prints found in production code"
          fi

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: always() && needs.quality.result == 'success' && (needs.changes.outputs.android == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    strategy:
      matrix:
        build-type: [debug, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: deps-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: |
          if [ "${{ matrix.build-type }}" = "release" ]; then
            flutter build apk --release --split-per-abi
            flutter build appbundle --release
          else
            flutter build apk --debug
          fi

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.build-type }}-${{ github.sha }}
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab
          retention-days: 14
          compression-level: 6

  build-ios:
    name: Build iOS
    runs-on: macos-14
    needs: [changes, quality]
    if: always() && needs.quality.result == 'success' && (needs.changes.outputs.ios == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: deps-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}

      - name: Install dependencies
        run: flutter pub get

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          zip -r Runner.app.zip Runner.app

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-${{ github.sha }}
          path: build/ios/iphoneos/Runner.app.zip
          retention-days: 14

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build-android]
    if: always() && github.event_name == 'pull_request' && needs.build-android.result == 'success'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release-${{ github.sha }}
          path: ./artifacts

      - name: Create deployment comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './artifacts';
            const files = fs.readdirSync(path);
            
            let comment = '## ðŸ“± Preview Build Ready\n\n';
            comment += '| Platform | Type | Download |\n';
            comment += '|----------|------|----------|\n';
            
            files.forEach(file => {
              if (file.endsWith('.apk')) {
                const type = file.includes('arm64') ? 'ARM64' : 'Universal';
                comment += `| Android | ${type} APK | [Download](${context.payload.pull_request.html_url}) |\n`;
              }
              if (file.endsWith('.aab')) {
                comment += `| Android | App Bundle | [Download](${context.payload.pull_request.html_url}) |\n`;
              }
            });
            
            comment += '\n> Builds are available for 14 days';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: always() && github.event_name == 'pull_request' && needs.quality.result == 'success' && needs.changes.outputs.any_code == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build size analysis
        run: |
          flutter build apk --analyze-size --target-platform android-arm64
          
      - name: Bundle analysis
        run: |
          flutter build appbundle --analyze-size
          echo "App bundle size analysis completed"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release-${{ github.sha }}
          path: ./android-release

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-release-${{ github.sha }}
          path: ./ios-release

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Ayu ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            android-release/*.apk
            android-release/*.aab
            ios-release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: always()
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const cutoff = new Date();
            cutoff.setDate(cutoff.getDate() - 7);
            
            for (const artifact of artifacts.data.artifacts) {
              if (new Date(artifact.created_at) < cutoff) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }